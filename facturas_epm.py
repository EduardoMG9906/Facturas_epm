import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from datetime import datetime
import sqlite3
import requests
import altair as alt
import os

# URL del archivo SQL en GitHub (reemplaza con tu enlace)
GITHUB_SQL_URL = "https://raw.githubusercontent.com/EduardoMG9906/Facturas_epm/refs/heads/main/proyecto.sql"

# Funci칩n para descargar y guardar el archivo SQL
def descargar_sql(url, filename="database.sql"):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, "wb") as file:
            file.write(response.content)
        return filename
    else:
        st.error("丘멆잺 Error al descargar el archivo SQL desde GitHub.")
        return None

# Descargar el archivo SQL
sql_file = descargar_sql(GITHUB_SQL_URL)


# 1. Configuraci칩n inicial de la aplicaci칩n
st.set_page_config(
    page_title="Dashboard Interactivo",
    page_icon="游늵",
    layout="wide"
)

st.title("游늯 Proyecto Analisis de Facturas EPM")
st.sidebar.title("游댌 Navegaci칩n")

# 3. Implementaci칩n de la Barra de Navegaci칩n
menu = st.sidebar.radio(
    "Selecciona una opci칩n:",
    ["Introducci칩n","Visualizaci칩n", "Datos",]
)

if sql_file:
    
    conn = sqlite3.connect(":memory:")
    cursor = conn.cursor()

    # Leer el contenido del archivo SQL
    with open(sql_file, "r", encoding="utf-8") as file:
        sql_script = file.read()

    # Ejecutar las sentencias SQL
    cursor.executescript(sql_script)
    conn.commit()

    # Obtener nombres de las tablas
    #tables = pd.read_sql("SELECT name FROM sqlite_master WHERE type='table'", conn)
    df = pd.read_sql(f"SELECT * FROM tarifas_epm_limpio", conn)
    
    df['A침o'] = df['A침o'].astype(int)
    df["Rango de Consumo"] = df["Rango de Consumo"].replace('0-CS','Rango 0 - CS')
    df["Rango de Consumo"] = df["Rango de Consumo"].replace('Mayor CS','Rango > CS')
    
    if menu == "Introducci칩n":
        st.write("""
                
        # Introducci칩n
            
        El costo de la energ칤a el칠ctrica es un factor determinante en la planificaci칩n financiera de hogares y empresas. 
        Sin embargo, la variabilidad de las tarifas seg칰n el tipo de cliente, el consumo y otros factores puede dificultar la toma de decisiones informadas. 
        Este proyecto tiene como objetivo analizar las tarifas el칠ctricas de EPM en el 치rea metropolitana entre 2016 y 2022, identificando patrones y tendencias que permitan optimizar el consumo energ칠tico. 
        A trav칠s del desarrollo de una herramienta de visualizaci칩n, se busca brindar informaci칩n clara y accesible para que los usuarios comprendan sus costos y tomen decisiones m치s eficientes en el uso de la energ칤a.
        """)    

    elif menu == "Datos":
        
        st.write("# Datos")
        
        st.write(f"### 游늵 Datos de la tabla `")        
        st.dataframe(df)

        # Opci칩n para descargar los datos en CSV
        csv = df.to_csv(index=False).encode("utf-8")
        st.download_button("游닌 Descargar CSV", csv, "datos.csv", "text/csv")
    
    # filtered_data = df
    
    elif menu == "Visualizaci칩n":
        st.subheader("游늵 Visualizaci칩n de Datos")
        # Agregar opci칩n "Todos" a la lista de categor칤as
        categorias = ["Todos"] + list(df["Tipo de Dato"].unique())
        
        categoria = st.selectbox("Selecciona una categor칤a", categorias)
        
        # Filtrar datos si se selecciona una categor칤a espec칤fica
        if categoria == "Todos":
            filtered_data = df.copy()  # No aplicar filtro
        else:
            filtered_data = df[df["Tipo de Dato"] == categoria]

        filtered_data["A침o"] = pd.to_numeric(filtered_data["A침o"], errors="coerce")
        filtered_data["Compartido"] = pd.to_numeric(filtered_data["Compartido"], errors="coerce")
        
        st.write("## Gr치ficos")
        
        col1, col2 = st.columns(2)
        with col1: 
            st.write(f"### Gr치fico de barras para el valor de la tarifa promedio por a침o para {categoria}")

            # Calcular el promedio por a침o
            df_mean = filtered_data.groupby("A침o", as_index=False)["Compartido"].mean()
            

            # Crear el gr치fico
            fig = px.box(
                filtered_data, 
                x="A침o", 
                y="Compartido", 
                labels={"Compartido": "Tarifa Promedio", "A침o": "A침o"},
                color_discrete_sequence=["#3498db"]
            )
            
            st.plotly_chart(fig)

            st.write(f"### Histograma para ver el comportamiento del valor de la energia por estrato y a침o para {categoria}")

            # Crear el gr치fico de l칤neas con Plotly
            fig_2 = px.histogram(
                filtered_data, 
                x="Tipo de Dato", 
                y="Compartido", 
                color="A침o",  # Equivalente a hue en Seaborn
                barmode= "group",  # A침ade puntos en las l칤neas
                #labels={"Tipo de Dato": "Categor칤a", "Compartido": "Tarifa Promedio", "A침o": "A침o"}
            )
            st.plotly_chart(fig_2)
        
        with col2:
            st.write(f"### Gr치fico de dispersi칩n para los rangos del valor de la tarifa  por a침o para {categoria}")
            fig_3 = px.scatter(
                filtered_data, 
                x="Rango de Consumo",
                y="Tipo de Dato",  
                color="Tipo de Informaci칩n",  # Equivalente a hue en Seaborn
                size = "Compartido",  
                #title=f"  {categoria}",
                #labels={"Tipo de Dato": "Categor칤a", "Compartido": "Tarifa Promedio", "A침o": "A침o"}
            )
            st.plotly_chart(fig_3)

    conn.close()


  
        


  